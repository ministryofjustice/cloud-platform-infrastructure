version: 0.2

env:
  variables:
     region: "eu-west-1"
     domain: "k8s.kops.integration.dsd.io"

#  parameter-store:
#     key: "value"

phases:
  install:
    commands:
       - apt update
       - apt install -y awscli git python3 unzip
       - easy_install boto3
       - wget https://github.com/kubernetes/kops/releases/download/1.8.0/kops-linux-amd64
       - chmod +x kops-linux-amd64 && mv kops-linux-amd64 /usr/local/bin/kops
       - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
       - chmod +x kubectl && mv ./kubectl /usr/local/bin/kubectl
       - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.8.2-linux-amd64.tar.gz -O helm.tar.gz; tar -xzf helm.tar.gz
       - chmod +x ./linux-amd64/helm && mv ./linux-amd64/helm /usr/local/bin/helm
       - wget https://releases.hashicorp.com/terraform/0.11.5/terraform_0.11.5_linux_amd64.zip -O terraform.zip; unzip terraform.zip -d /usr/local/bin/; chmod +x /usr/local/bin/terraform

  pre_build:
    commands:
      - alias python=python3
      - cd cluster-pipeline/
  build:
    commands:
# todo for each
      - bin/generate_json.sh test-cluster $domain $region
      - bin/configure_availability_zones.py $region
      - cat config.json
      - bin/setup_state_store.py
      - terraform remote config -backend=s3 -backend-config="region=$region" -backend-config="bucket=$(bin/get_state_store_name.py)" -backend-config="key=$(bin/get_fabric_name.py).tfstate"
      - terraform get -update=true
      - terraform plan -var-file=config.json -out plan.out
      - terraform apply plan.out

#  post_build:
#    commands:
#       - ""

#artifacts:
  #files:
    # - location
  #discard-paths: yes
  #base-directory: location

#cache:
  #paths:
    # - paths
