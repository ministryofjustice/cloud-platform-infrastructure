version: 0.2

#env:
  #variables:
     # key: "value"
  #parameter-store:
     # key: "value"

phases:
  install:
    commands:
       - apt update
       - apt install -y awscli git python3 python3-pip unzip
       - easy_install boto3
       - wget https://github.com/kubernetes/kops/releases/download/1.8.0/kops-linux-amd64
       - chmod +x kops-linux-amd64 && mv kops-linux-amd64 /usr/local/bin/kops
       - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
       - chmod +x kubectl && mv ./kubectl /usr/local/bin/kubectl
       - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.8.2-linux-amd64.tar.gz -O helm.tar.gz; tar -xzf helm.tar.gz
       - chmod +x ./linux-amd64/helm && mv ./linux-amd64/helm /usr/local/bin/helm
       - wget https://releases.hashicorp.com/terraform/0.11.5/terraform_0.11.5_linux_amd64.zip -O terraform.zip; unzip terraform.zip -d /usr/local/bin/; chmod +x /usr/local/bin/terraform

  pre_build:
    commands:
      - alias python=python3
      - aws --version
      - python --version
      - terraform --version
      - "chmod +x cluster-pipeline/bin/*"
#      - "kubectl version"
#      - "kops version"

  build:
    commands:
      - cd cluster-pipeline/
      - bin/generate_json.sh test-cluster k8s.kops.integration.dsd.io eu-west-1 
      - bin/configure_availability_zones.py eu-west-1
      - cat config.json


#      - "kubectl config get-contexts"
#      - "kubectl config use-context non-production.k8s.integration.dsd.io"
#      - "kubectl cluster-info"
#      - "kubectl get namespaces"
#      - "kubectl get pods --all-namespaces"
#      - "which python3"
#      - "python3 namespace.py"
#  post_build:
#    commands:
#       - "ls namespaces/ | while read file; do helm init --service-account $file-tiller --tiller-namespace $file; done"

#artifacts:
  #files:
    # - location
  #discard-paths: yes
  #base-directory: location

#cache:
  #paths:
    # - paths
