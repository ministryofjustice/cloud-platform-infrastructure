AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template creates the standard IAM Security Roles - IAMAdminRole,
  BillingAdminRole, InfraAdminRole, NetworkAdminRole, UserDeveloperRole, UserTesterRole, UserLiveSupportRole and AuditAdminRole'

Parameters:
  CrossAccountId:
    Description: 'The account ID of the cross-account principal'
    Type: String
    AllowedPattern: "[0-9]{12}"

Resources:
  IAMAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/IAMFullAccess
      RoleName: IAMAdminRole

  BillingAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSAccountUsageReportAccess
      - arn:aws:iam::aws:policy/AWSAccountActivityAccess
      RoleName: BillingAdminRole

  InfraAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: InfraAdminRole

  NetworkAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonVPCFullAccess
      - arn:aws:iam::aws:policy/AWSDirectConnectFullAccess
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      RoleName: NetworkAdminRole

  UserDeveloperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      RoleName: UserDeveloperRole

  UserDBARole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      RoleName: UserDBARole

  UserTesterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      RoleName: UserTesterRole

  AuditAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/SecurityAudit
      RoleName: AuditAdminRole

  UserLiveSupportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ "", [ "arn:aws:iam::", !Ref CrossAccountId, ":root" ] ]
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              "aws:MultiFactorAuthPresent": true
      RoleName: UserLiveSupportRole


################################################################################
#
# Shared policies
#
################################################################################

  AWSSupportManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
    - UserTesterRole
    - UserDBARole
    - UserDeveloperRole
    - UserLiveSupportRole
    Properties:
      Description: DBA, Tester and Dev access to AWS support
      ManagedPolicyName: !Sub user-aws-support-managed-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: support:*
          Resource: "*"
      Roles:
      - UserTesterRole
      - UserDBARole
      - UserDeveloperRole
      - UserLiveSupportRole

  DBAManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
    - UserDBARole
    Properties:
      Description: DBA access to manage RDS instances and snapshots
      ManagedPolicyName: !Sub user-dba-managed-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - rds:StartDBInstance
          - rds:StopDBInstance
          - rds:RebootDBInstance
          - rds:CreateDBSnapshot
          - rds:DeleteDBSnapshot
          Resource: "*"
      Roles:
      - UserDBARole

  ParameterStoreManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
    - UserTesterRole
    - UserDBARole
    - UserDeveloperRole
    Properties:
      Description: DBA, Tester and Dev access to manage parameters
      ManagedPolicyName: !Sub user-parameter-store-managed-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Deny
          Action:
          - ssm:GetParameter*
          - ssm:PutParameter
          - ssm:DeleteParameter
          NotResource:
          - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/APP*"
        - Effect: Allow
          Action:
          - ssm:GetParameter*
          - ssm:PutParameter
          - ssm:DeleteParameter
          Resource:
          - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/APP*"
      Roles:
      - UserTesterRole
      - UserDBARole
      - UserDeveloperRole

  LZReadOnlyAccess:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
    - UserTesterRole
    - UserDBARole
    - UserDeveloperRole
    - UserLiveSupportRole
    Properties:
      Description: Customized LZ ReadOnlyAccess managed policy
      ManagedPolicyName: LZReadOnlyAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - acm:Describe*
          - acm:Get*
          - acm:List*
          - apigateway:GET
          - application-autoscaling:Describe*
          - autoscaling-plans:Describe*
          - athena:List*
          - athena:Batch*
          - athena:Get*
          - autoscaling:Describe*
          - cloud9:Describe*
          - cloud9:List*
          - cloudformation:Describe*
          - cloudformation:Get*
          - cloudformation:List*
          - cloudformation:Estimate*
          - cloudformation:Preview*
          - cloudfront:Get*
          - cloudfront:List*
          - cloudhsm:List*
          - cloudhsm:Describe*
          - cloudhsm:Get*
          - cloudsearch:Describe*
          - cloudsearch:List*
          - cloudtrail:Describe*
          - cloudtrail:Get*
          - cloudtrail:List*
          - cloudtrail:LookupEvents
          - cloudwatch:Describe*
          - cloudwatch:Get*
          - cloudwatch:List*
          - codebuild:BatchGet*
          - codebuild:List*
          - codecommit:BatchGet*
          - codecommit:Get*
          - codecommit:GitPull
          - codecommit:List*
          - codedeploy:BatchGet*
          - codedeploy:Get*
          - codedeploy:List*
          - codepipeline:List*
          - codepipeline:Get*
          - codestar:List*
          - codestar:Describe*
          - codestar:Get*
          - codestar:Verify*
          - config:Deliver*
          - config:Describe*
          - config:Get*
          - config:List*
          - datapipeline:Describe*
          - datapipeline:EvaluateExpression
          - datapipeline:Get*
          - datapipeline:List*
          - datapipeline:QueryObjects
          - datapipeline:Validate*
          - directconnect:Describe*
          - dms:Describe*
          - dms:List*
          - dms:Test*
          - ds:Check*
          - ds:Describe*
          - ds:Get*
          - ds:List*
          - ds:Verify*
          - ec2:Describe*
          - ec2:Get*
          - ec2messages:Get*
          - ecr:BatchCheck*
          - ecr:BatchGet*
          - ecr:Describe*
          - ecr:Get*
          - ecr:List*
          - ecs:Describe*
          - ecs:List*
          - elasticache:Describe*
          - elasticache:List*
          - elasticbeanstalk:Check*
          - elasticbeanstalk:Describe*
          - elasticbeanstalk:List*
          - elasticbeanstalk:Request*
          - elasticbeanstalk:Retrieve*
          - elasticbeanstalk:Validate*
          - elasticfilesystem:Describe*
          - elasticloadbalancing:Describe*
          - es:Describe*
          - es:List*
          - es:ESHttpGet
          - es:ESHttpHead
          - events:Describe*
          - events:List*
          - events:Test*
          - firehose:Describe*
          - firehose:List*
          - glacier:List*
          - glacier:Describe*
          - glacier:Get*
          - guardduty:Get*
          - guardduty:List*
          - health:Describe*
          - health:Get*
          - health:List*
          - iam:Generate*
          - iam:Get*
          - iam:List*
          - iam:Simulate*
          - importexport:Get*
          - importexport:List*
          - inspector:Describe*
          - inspector:Get*
          - inspector:List*
          - inspector:Preview*
          - inspector:LocalizeText
          - kinesisanalytics:Describe*
          - kinesisanalytics:Discover*
          - kinesisanalytics:Get*
          - kinesisanalytics:List*
          - kinesis:Describe*
          - kinesis:Get*
          - kinesis:List*
          - kms:Describe*
          - kms:Get*
          - kms:List*
          - lambda:List*
          - lambda:Get*
          - logs:Describe*
          - logs:Get*
          - logs:FilterLogEvents
          - logs:ListTagsLogGroup
          - logs:TestMetricFilter
          - machinelearning:Describe*
          - machinelearning:Get*
          - opsworks:Describe*
          - opsworks:Get*
          - opsworks-cm:Describe*
          - organizations:Describe*
          - organizations:List*
          - rds:Describe*
          - rds:List*
          - rds:Download*
          - redshift:Describe*
          - redshift:View*
          - redshift:Get*
          - resource-groups:Describe*
          - resource-groups:Get*
          - resource-groups:List*
          - resource-groups:Search*
          - route53:Get*
          - route53:List*
          - route53:Test*
          - route53domains:Check*
          - route53domains:Get*
          - route53domains:List*
          - route53domains:View*
          - s3:Get*
          - s3:List*
          - s3:Head*
          - serverlessrepo:List*
          - serverlessrepo:Get*
          - serverlessrepo:SearchApplications
          - servicecatalog:List*
          - servicecatalog:Scan*
          - servicecatalog:Search*
          - servicecatalog:Describe*
          - ses:Get*
          - ses:List*
          - ses:Describe*
          - ses:Verify*
          - shield:Describe*
          - shield:List*
          - ssm:DescribeParameters
          - sns:Get*
          - sns:List*
          - sns:Check*
          - sqs:Get*
          - sqs:List*
          - sqs:Receive*
          - states:List*
          - states:Describe*
          - states:GetExecutionHistory
          - storagegateway:Describe*
          - storagegateway:List*
          - sts:Get*
          - swf:Count*
          - swf:Describe*
          - swf:Get*
          - swf:List*
          - tag:Get*
          - trustedadvisor:Describe*
          - waf:Get*
          - waf:List*
          - waf-regional:List*
          - waf-regional:Get*
          - workspaces:Describe*
          - xray:BatchGet*
          - xray:Get*
          Resource: "*"
      Roles:
      - UserTesterRole
      - UserDBARole
      - UserDeveloperRole
      - UserLiveSupportRole

##APIs to restrict and/or monitor - "Indicators of compromise"
  MaliciousActivityDenyPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn:
    - IAMAdminRole
    - BillingAdminRole
    - InfraAdminRole
    - NetworkAdminRole
    - UserDeveloperRole
    - UserDBARole
    - UserTesterRole
    - AuditAdminRole
    - UserLiveSupportRole
    Properties:
      ManagedPolicyName: !Sub user-malicious-activity-deny-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Deny"
          Action:
          - "ec2:AcceptVpcPeeringConnection"
          - "ec2:AssociateRouteTable"
          - "ec2:AttachInternetGateway"
          - "ec2:AttachVpnGateway"
          - "ec2:AuthorizeSecurityGroupEgress"
          - "ec2:AuthorizeSecurityGroupIngress"
          - "ec2:CreateCustomerGateway"
          - "ec2:CreateDhcpOptions"
          - "ec2:CreateNatGateway"
          - "ec2:CreateNetworkAcl"
          - "ec2:CreateNetworkAclEntry"
          - "ec2:CreateRoute"
          - "ec2:CreateRouteTable"
          - "ec2:CreateVpc"
          - "ec2:CreateVpcPeeringConnection"
          - "ec2:CreateVpnConnection"
          - "ec2:CreateVpnConnectionRoute"
          - "ec2:CreateVpnGateway"
          - "ec2:DeleteCustomerGateway"
          - "ec2:DeleteDhcpOptions"
          - "ec2:DeleteInternetGateway"
          - "ec2:DeleteNatGateway"
          - "ec2:DeleteNetworkAcl"
          - "ec2:DeleteNetworkAclEntry"
          - "ec2:DeleteRoute"
          - "ec2:DeleteRouteTable"
          - "ec2:DeleteSubnet"
          - "ec2:DeleteVpc"
          - "ec2:DeleteVpcPeeringConnection"
          - "ec2:DeleteVpnConnection"
          - "ec2:DeleteVpnConnectionRoute"
          - "ec2:DeleteVpnGateway"
          - "ec2:DisassociateAddress"
          - "ec2:DisassociateRouteTable"
          - "ec2:ReplaceNetworkAclAssociation"
          - "ec2:ReplaceNetworkAclEntry"
          - "ec2:TerminateInstances"
          - "cloudtrail:DeleteTrail"
          - "cloudtrail:StopLogging"
          - "cloudtrail:UpdateTrail"
          - "iam:AddRoleToInstanceProfile"
          - "iam:AddUserToGroup"
          - "iam:AttachGroupPolicy"
          - "iam:AttachRolePolicy"
          - "iam:AttachUserPolicy"
          - "iam:DeleteRole"
          - "iam:DeleteRolePolicy"
          - "iam:DeleteUserPolicy"
          - "iam:PutGroupPolicy"
          - "iam:PutRolePolicy"
          - "iam:PutUserPolicy"
          - "iam:UpdateAssumeRolePolicy"
          - "aws-portal:ModifyAccount"
          - "aws-portal:ModifyBilling"
          - "aws-portal:ModifyPaymentMethods"
          - "kms:DeleteAlias"
          - "kms:ScheduleKeyDeletion"
          - "kms:CreateGrant"
          - "kms:PutKeyPolicy"
          Resource: "*"
      Roles:
      - IAMAdminRole
      - BillingAdminRole
      - InfraAdminRole
      - NetworkAdminRole
      - UserDeveloperRole
      - UserDBARole
      - UserTesterRole
      - AuditAdminRole
      - UserLiveSupportRole
