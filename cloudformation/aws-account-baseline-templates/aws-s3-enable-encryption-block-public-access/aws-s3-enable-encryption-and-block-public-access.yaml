#=========================================================================================
AWSTemplateFormatVersion: 2010-09-09
Description: 'Determine S3 Private buckets in the AWS account and set the public access block permissions,
              Determine encryption status of S3 buckets in the AWS account and set the default encryption'
#=========================================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: SNS Topic
      Parameters:
        - pCreateSnsTopic
        - pExistingSnsTopic
    - Label:
        default: Choose fuction
      Parameters:
        - pS3PublicAccessBlockPermissions
        - pS3BucketsToSkipPublicAccessBlock
        - pS3BucketEncryption
        - pS3BucketsToSkipEncryption
    ParameterLabels:
      pCreateSnsTopic:
        default: Create new SNS Topic
      pExistingSnsTopic:
        default: Existing SNS Topic
      pS3PublicAccessBlockPermissions:
        default: Check S3 Private buckets and apply Public Access Block permissions
      pS3BucketsToSkipPublicAccessBlock:
        default: List of S3 Buckets to Skip Public Access Block permissions
      pS3BucketEncryption:
        default: Check ALL S3 Buckets and apply default encryption (SSE)
      pS3BucketsToSkipEncryption:
        default: List of S3 Buckets to Skip Encryption

Parameters:
  pCreateSnsTopic:
    Type: String
    Default: 'false'
    Description: If set to true, it will create a new SNS topic
    AllowedValues:
    - 'true'
    - 'false'
  pExistingSnsTopic:
    Type: String
    Description: Arn of existing SNS Topic
    Default: ''
  pS3PublicAccessBlockPermissions:
    Type: String
    Description: Select true to apply Public Access Block permissions to S3 Private Buckets
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
  pS3BucketsToSkipPublicAccessBlock:
    Type: String
    Description: List of S3 Buckets to Skip Public Access Block permissions
    Default: ''
  pS3BucketEncryption:
    Type: String
    Description: Select true to apply default encryption to all S3 buckets
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
  pS3BucketsToSkipEncryption:
    Type: String
    Description: List of S3 Buckets to Skip Encryption
    Default: ''

Conditions:
  cCreateSnsTopic: !Equals [ !Ref pCreateSnsTopic, 'true' ]
  cApplyS3PublicAccessBlock: !Equals [ !Ref pS3PublicAccessBlockPermissions, 'true' ]
  cApplyS3BucketEncryption: !Equals [ !Ref pS3BucketEncryption, 'true' ]

Resources:
###### Lambda to Apply Public Access Block permissios for S3 Private Buckets ######
  RoleForS3BucketBlockPublicAccessFunction:
    Type: AWS::IAM::Role
    Condition: cApplyS3PublicAccessBlock
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /servicerole/
      Policies:
        -
          PolicyName: S3PublicAccessBlockAndSnsPublishPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ListBucketPermissions
                Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicyStatus
                  - s3:GetBucketPolicy
                  - s3:GetBucketPublicAccessBlock
                  - s3:ListBucket
                  - s3:ListAllMyBuckets
                  - s3:PutBucketPublicAccessBlock
                Resource: "arn:aws:s3:::*"
              - Sid: SnsPublishPermissions
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: "arn:aws:sns:*:*:*"

  FunctionForS3BucketBlockPublicAccess:
    Type: AWS::Lambda::Function
    DependsOn: RoleForS3BucketBlockPublicAccessFunction
    Condition: cApplyS3PublicAccessBlock
    Properties:
      FunctionName: S3BucketBlockPublicAccess
      Code: ./lambda/s3-bucket-block-public-access.py
      Description: Determine the list of S3 private buckets and apply Public Access Block permissions
      Environment:
        Variables:
          TOPIC_ARN: !If [cCreateSnsTopic, !Ref SnsAlarmTopic, !Ref pExistingSnsTopic]
          S3_EXCEPTION: !Ref pS3BucketsToSkipPublicAccessBlock
      Handler: s3-bucket-block-public-access.lambda_handler
      MemorySize: 256
      Role: !GetAtt RoleForS3BucketBlockPublicAccessFunction.Arn
      Runtime: python3.6
      Timeout: 600
  LambdaPermissionForS3BucketBlockPublicAccess:
    Type: AWS::Lambda::Permission
    Condition: cApplyS3PublicAccessBlock
    DependsOn:
      - FunctionForS3BucketBlockPublicAccess
    Properties:
      FunctionName: !GetAtt FunctionForS3BucketBlockPublicAccess.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  # Optional Section for Lambda Run Schedule runs on 1000 UTC Wednesday
  ScheduledRuleForS3BucketBlockPublicAccess:
    Type: AWS::Events::Rule
    Condition: cApplyS3PublicAccessBlock
    Properties:
      Name: S3BucketBlockPublicAccess
      Description: Determine the list of S3 private buckets and apply Public Access Block permissions
      ScheduleExpression: cron(0 10 ? * WED *)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt FunctionForS3BucketBlockPublicAccess.Arn
          Id: TargetFunctionV1

###### Lambda to Apply SSE Default Encryption to S3 Buckets ######
  RoleForApplyDefaultEncryptionForS3BucketsFunction:
    Type: AWS::IAM::Role
    Condition: cApplyS3BucketEncryption
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /servicerole/
      Policies:
        -
          PolicyName: S3EncryptionAndSnsPublishPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ListBucketPermissions
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListAllMyBuckets
                  - s3:GetEncryptionConfiguration
                  - s3:PutEncryptionConfiguration
                Resource: "arn:aws:s3:::*"
              - Sid: SnsPublishPermissions
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: "arn:aws:sns:*:*:*"

  FunctionForS3BucketEncryption:
    Type: AWS::Lambda::Function
    DependsOn: RoleForApplyDefaultEncryptionForS3BucketsFunction
    Condition: cApplyS3BucketEncryption
    Properties:
      FunctionName: S3BucketEncryption
      Code: ./lambda/s3-bucket-enable-default-encryption.py
      Description: Determine the list of S3 buckets that are not encrypted and apply default encryption
      Environment:
        Variables:
          TOPIC_ARN: !If [cCreateSnsTopic, !Ref SnsAlarmTopic, !Ref pExistingSnsTopic]
          S3_EXCEPTION: !Ref pS3BucketsToSkipEncryption
      Handler: s3-bucket-enable-default-encryption.lambda_handler
      MemorySize: 256
      Role: !GetAtt RoleForApplyDefaultEncryptionForS3BucketsFunction.Arn
      Runtime: python3.6
      Timeout: 600
  LambdaPermissionForS3BucketEncryption:
    Type: AWS::Lambda::Permission
    Condition: cApplyS3BucketEncryption
    DependsOn:
      - FunctionForS3BucketEncryption
    Properties:
      FunctionName: !GetAtt FunctionForS3BucketEncryption.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  # Optional Section for Lambda Run Schedule runs on 1200 UTC Wednesday
  ScheduledRuleForS3BucketEncryption:
    Type: AWS::Events::Rule
    Condition: cApplyS3BucketEncryption
    Properties:
      Name: S3BucketEncryption
      Description: Determine the list of S3 buckets that are not encrypted and apply default encryption
      ScheduleExpression: cron(0 12 ? * WED *)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt FunctionForS3BucketEncryption.Arn
          Id: TargetFunctionV1
  #==================================================
  # Optional SNS configuration
  #==================================================
  SnsAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: cCreateSnsTopic
    Properties:
      DisplayName: "SNS-S3BlockPublicAccessAndDefaultEncryption"

Outputs:
  oFunctionS3BucketBlockPublicAccess:
    Condition: cApplyS3PublicAccessBlock
    Description: Arn of Lambda Function for S3BucketBlockPublicAccess
    Value: !GetAtt [ FunctionForS3BucketBlockPublicAccess, Arn ]
  oFunctionS3BucketEncryption:
    Condition: cApplyS3BucketEncryption
    Description: Arn of Lambda Function for S3BucketEncryption
    Value: !GetAtt [ FunctionForS3BucketEncryption, Arn ]
  oSNSTopic:
    Condition: cCreateSnsTopic
    Description: The SNS Notification Topic
    Value: !Ref SnsAlarmTopic
