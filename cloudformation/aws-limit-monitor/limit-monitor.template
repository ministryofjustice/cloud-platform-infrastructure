AWSTemplateFormatVersion: "2010-09-09"

Description: AWS Serverless Limit Monitor Solution

Parameters:
  AccountList:
    Type: String
    AllowedPattern: "^\"\\d{12}\"(,\"\\d{12}\")*$|(^\\s*)$"
    Description: List of comma-separated and double-quoted account numbers to monitor. If you leave this parameter blank, the solution will only monitor limits in the primary account. If you enter multiple secondary account IDs, you must also provide the primary account ID in this parameter.

  SNSEmail:
    Type: String
    Default: platforms@digital.justice.gov.uk
    Description: (Required) The email address to subscribe for alert messages.

  SNSEvents:
    Type: String
    Default: "\"ERROR\""
    Description: List of alert levels to send email alerts in response to. Leave blank if you do not wish to receive email notifications. Must be double-quoted and comma separated.

  SlackChannel:
    Type: String
    Default: limit_monitor_slack_channel
    Description: SSM parameter key for the Slack channel. Leave blank if you do not wish to receive Slack notifications.

  SlackEvents:
    Type: String
    Default: "\"WARN\",\"ERROR\""
    Description: List of alert levels to send Slack alerts in response to. Leave blank if you do not wish to receive Slack notifications. Must be double-quoted and comma separated.

  SlackHookURL:
    Type: String
    Default: limit_monitor_slack_webhook
    Description: SSM parameter key for incoming Slack web hook URL. Leave blank if you do not wish to receive Slack notifications.

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Account Configuration
        Parameters:
          - AccountList
      - Label:
          default: Notification Configuration
        Parameters:
          - SNSEvents
          - SNSEmail
          - SlackEvents
          - SlackHookURL
          - SlackChannel
    ParameterLabels:
      AccountList:
        default: Account List
      SNSEmail:
        default: Email Address
      SNSEvents:
        default: Email Notification Level
      SlackChannel:
        default: Slack Channel Key Name
      SlackEvents:
        default: Slack Notification Level
      SlackHookURL:
        default: Slack Hook Url Key Name

Mappings:
  EventsMap:
    Checks:
      Services: "\"AutoScaling\",\"CloudFormation\",\"DynamoDB\",\"EBS\",\"EC2\",\"ELB\",\"IAM\",\"Kinesis\",\"RDS\",\"Route53\",\"SES\",\"VPC\",\"ElastiCache\""

  MetricsMap:
    Send-Data:
      SendAnonymousData: "Yes"

  RefreshRate:
    CronSchedule:
      Default: cron(0 11 * * ? *)

  SourceCode:
    General:
      KeyPrefix: limit-monitor/v5.1.1
      S3Bucket: solutions

Conditions:
  AnonymousMetric: !Equals
    - "Fn::FindInMap":
        - MetricsMap
        - Send-Data
        - SendAnonymousData
    - "Yes"

  SNSTrue: !Not
    - "Fn::Equals":
        - Ref: SNSEvents
        - ""

  SingleAccnt: !Equals
    - Ref: AccountList
    - ""

  SlackTrue: !Not
    - "Fn::Equals":
        - Ref: SlackEvents
        - ""

Resources:
  DeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 604800

  EventQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 86400
      RedrivePolicy:
        deadLetterTargetArn: !Sub ${DeadLetterQueue.Arn}
        maxReceiveCount: 3
      VisibilityTimeout: 60

  LimtrHelperRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: Custom_Limtr_Helper_Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - "events:PutPermission"
                  - "events:RemovePermission"
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "ssm:PutParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Condition: SNSTrue
    Properties:
      Subscription:
        - Endpoint: !Sub ${SNSEmail}
          Protocol: email

  SummaryDDB:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: TimeStamp
          AttributeType: S
        - AttributeName: MessageId
          AttributeType: S
      KeySchema:
        - AttributeName: MessageId
          KeyType: HASH
        - AttributeName: TimeStamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      SSESpecification:
        SSEEnabled: true
      TableName: !Sub "LimitMonitor-${AWS::StackName}"
      Tags:
        - Key: Solution
          Value: Serverless-Limit-Monitor
      TimeToLiveSpecification:
        AttributeName: ExpiryTime
        Enabled: true

  EventQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Id: LimitMonitorSQSPolicy
        Statement:
          - Sid: LimitMonitorCWEventsAccess
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sqs:SendMessage"
            Resource: !Sub ${EventQueue.Arn}
      Queues:
        - Ref: EventQueue

  LimtrHelperFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join
          - "-"
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - S3Bucket
            - Ref: "AWS::Region"
        S3Key: !Join
          - /
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - KeyPrefix
            - limtr-helper-service.zip
      Description: This function generates UUID, establishes cross account trust on CloudWatch Event Bus and sends anonymous metric
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Handler: index.handler
      Role: !Sub ${LimtrHelperRole.Arn}
      Runtime: nodejs12.x
      Timeout: 300

  SNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Id: LimitMonitorSNSPolicy
        Statement:
          - Sid: LimitMonitorCWEventsAccess
            Effect: Allow
            Principal:
              Service: !Sub events.amazonaws.com
            Action: "sns:Publish"
            Resource: "*"
      Topics:
        - Ref: SNSTopic

  SlackNotifierRole:
    Type: "AWS::IAM::Role"
    Condition: SlackTrue
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "Limit-Monitor-Policy-${AWS::StackName}-${AWS::Region}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"

  TARefresherRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "Override the IAM role to allow support:* resource on its permissions policy"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "Limit-Monitor-Refresher-Policy-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - "support:*"
                Resource:
                  - "*"

  CreateUUID:
    Type: "Custom::UUID"
    Properties:
      ServiceToken: !GetAtt LimtrHelperFunction.Arn

  TARefresher:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join
          - "-"
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - S3Bucket
            - Ref: "AWS::Region"
        S3Key: !Join
          - /
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - KeyPrefix
            - limtr-refresh-service.zip
      Description: Serverless Limit Monitor - Lambda function to summarize service limits
      Environment:
        Variables:
          AWS_SERVICES: !FindInMap
            - EventsMap
            - Checks
            - Services
          LOG_LEVEL: INFO
      Handler: index.handler
      Role: !Sub ${TARefresherRole.Arn}
      Runtime: nodejs12.x
      Timeout: 300

  DeploymentData:
    Type: "Custom::DeploymentData"
    Properties:
      ANONYMOUS_DATA: !FindInMap
        - MetricsMap
        - Send-Data
        - SendAnonymousData
      SOLUTION: SO0005
      ServiceToken: !GetAtt LimtrHelperFunction.Arn
      UUID: !Sub ${CreateUUID.UUID}
      VERSION: v5.1.1

  EstablishTrust:
    Type: "Custom::CrossAccntTrust"
    Properties:
      SUB_ACCOUNTS: !Ref AccountList
      ServiceToken: !GetAtt LimtrHelperFunction.Arn

  LimitSummarizerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "Limit-Monitor-Policy-${AWS::StackName}-${AWS::Region}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - "sqs:DeleteMessage"
                  - "sqs:ReceiveMessage"
                Resource:
                  - "Fn::Sub": ${EventQueue.Arn}
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                Resource:
                  - "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SummaryDDB}"

  TARefreshSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Limit Monitor Solution - Schedule to refresh TA checks
      ScheduleExpression: !FindInMap
        - RefreshRate
        - CronSchedule
        - Default
      State: ENABLED
      Targets:
        - Arn: !Sub ${TARefresher.Arn}
          Id: TARefreshRate

  TASQSRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Limit Monitor Solution - Rule for TA SQS events
      EventPattern: !Join
        - ""
        - - "{\"account\":["
          - "Fn::If":
              - SingleAccnt
              - "Fn::Join":
                  - ""
                  - - "\""
                    - Ref: "AWS::AccountId"
                    - "\""
              - Ref: AccountList
          - "],"
          - "\"source\":[\"aws.trustedadvisor\"],"
          - "\"detail-type\":[\"Trusted Advisor Check Item Refresh Notification\"],"
          - "\"detail\":{"
          - "\"status\":["
          - "\"OK\",\"WARN\",\"ERROR\""
          - "],"
          - "\"check-item-detail\":{"
          - "\"Service\":["
          - "Fn::FindInMap":
              - EventsMap
              - Checks
              - Services
          - "]"
          - "}"
          - "}"
          - "}"
      State: ENABLED
      Targets:
        - Arn: !Sub ${EventQueue.Arn}
          Id: LimitMonitorSQSTarget

  AccountAnonymousData:
    Type: "Custom::AnonymousData"
    Condition: AnonymousMetric
    Properties:
      SLACK_EVENTS: !If
        - SlackTrue
        - "true"
        - "false"
      SNS_EVENTS: !If
        - SNSTrue
        - "true"
        - "false"
      SOLUTION: SO0005
      SUB_ACCOUNTS: !Ref AccountList
      ServiceToken: !GetAtt LimtrHelperFunction.Arn
      TA_REFRESH_RATE: !FindInMap
        - RefreshRate
        - CronSchedule
        - Default
      UUID: !Sub ${CreateUUID.UUID}
      VERSION: v5.1.1

  SSMParameter:
    Type: "Custom::SSMParameter"
    Condition: SlackTrue
    Properties:
      SLACK_CHANNEL_KEY: !Sub ${SlackChannel}
      SLACK_HOOK_KEY: !Sub ${SlackHookURL}
      ServiceToken: !GetAtt LimtrHelperFunction.Arn

  SlackNotifier:
    Type: "AWS::Lambda::Function"
    Condition: SlackTrue
    Properties:
      Code:
        S3Bucket: !Join
          - "-"
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - S3Bucket
            - Ref: "AWS::Region"
        S3Key: !Join
          - /
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - KeyPrefix
            - limtr-slack-service.zip
      Description: Serverless Limit Monitor - Lambda function to send notifications on slack
      Environment:
        Variables:
          LOG_LEVEL: INFO
          SLACK_CHANNEL: !Sub ${SlackChannel}
          SLACK_HOOK: !Sub ${SlackHookURL}
      Handler: index.handler
      Role: !Sub ${SlackNotifierRole.Arn}
      Runtime: nodejs12.x
      Timeout: 300

  TARefresherInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${TARefresher}
      Principal: !Sub events.amazonaws.com
      SourceArn: !Sub ${TARefreshSchedule.Arn}

  TASNSRule:
    Type: "AWS::Events::Rule"
    Condition: SNSTrue
    Properties:
      Description: Limit Monitor Solution - Rule for TA SNS events
      EventPattern: !Join
        - ""
        - - "{\"account\":["
          - "Fn::If":
              - SingleAccnt
              - "Fn::Join":
                  - ""
                  - - "\""
                    - Ref: "AWS::AccountId"
                    - "\""
              - Ref: AccountList
          - "],"
          - "\"source\":[\"aws.trustedadvisor\"],"
          - "\"detail-type\":[\"Trusted Advisor Check Item Refresh Notification\"],"
          - "\"detail\":{"
          - "\"status\":["
          - Ref: SNSEvents
          - "],"
          - "\"check-item-detail\":{"
          - "\"Service\":["
          - "Fn::FindInMap":
              - EventsMap
              - Checks
              - Services
          - "]"
          - "}"
          - "}"
          - "}"
      State: ENABLED
      Targets:
        - Arn: !Sub ${SNSTopic}
          Id: LimitMonitorSNSTarget
          InputTransformer:
            InputPathsMap:
              account: $.account
              limitdetails: $.detail.check-item-detail
              time: $.time
            InputTemplate: "\"AWS-Account : <account> || Timestamp : <time> || Limit-Details : <limitdetails>\""

  LimitSummarizer:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join
          - "-"
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - S3Bucket
            - Ref: "AWS::Region"
        S3Key: !Join
          - /
          - - "Fn::FindInMap":
                - SourceCode
                - General
                - KeyPrefix
            - limtr-report-service.zip
      Description: Serverless Limit Monitor - Lambda function to summarize service limit usage
      Environment:
        Variables:
          ANONYMOUS_DATA: !FindInMap
            - MetricsMap
            - Send-Data
            - SendAnonymousData
          LIMIT_REPORT_TBL: !Sub ${SummaryDDB}
          LOG_LEVEL: INFO
          MAX_LOOPS: 10
          MAX_MESSAGES: 10
          SOLUTION: SO0005
          SQS_URL: !Sub ${EventQueue}
          UUID: !Sub ${CreateUUID.UUID}
      Handler: index.handler
      Role: !Sub ${LimitSummarizerRole.Arn}
      Runtime: nodejs12.x
      Timeout: 300

  TASlackRule:
    Type: "AWS::Events::Rule"
    Condition: SlackTrue
    Properties:
      Description: Limit Monitor Solution - Rule for TA Slack events
      EventPattern: !Join
        - ""
        - - "{\"account\":["
          - "Fn::If":
              - SingleAccnt
              - "Fn::Join":
                  - ""
                  - - "\""
                    - Ref: "AWS::AccountId"
                    - "\""
              - Ref: AccountList
          - "],"
          - "\"source\":[\"aws.trustedadvisor\"],"
          - "\"detail-type\":[\"Trusted Advisor Check Item Refresh Notification\"],"
          - "\"detail\":{"
          - "\"status\":["
          - Ref: SlackEvents
          - "],"
          - "\"check-item-detail\":{"
          - "\"Service\":["
          - "Fn::FindInMap":
              - EventsMap
              - Checks
              - Services
          - "]"
          - "}"
          - "}"
          - "}"
      State: ENABLED
      Targets:
        - Arn: !Sub ${SlackNotifier.Arn}
          Id: LimitMonitorSlackTarget

  QueuePollSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Limit Monitor Solution - Schedule to poll SQS queue
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !Sub ${LimitSummarizer.Arn}
          Id: SqsPollRate

  SlackNotifierInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: SlackTrue
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${SlackNotifier}
      Principal: events.amazonaws.com
      SourceArn: !Sub ${TASlackRule.Arn}

  SummarizerInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${LimitSummarizer}
      Principal: !Sub events.amazonaws.com
      SourceArn: !Sub ${QueuePollSchedule.Arn}

Outputs:
  AccountList:
    Description: Accounts to be monitored for service limits
    Value: !Ref AccountList

  ServiceChecks:
    Description: Service limits monitored in the account
    Value: !FindInMap
      - EventsMap
      - Checks
      - Services

  SlackChannelKey:
    Description: SSM parameter for Slack Channel, change the value for your slack workspace
    Value: !Sub ${SlackChannel}
    Condition: SlackTrue

  SlackHookKey:
    Description: SSM parameter for Slack Web Hook, change the value for your slack workspace
    Value: !Sub ${SlackHookURL}
    Condition: SlackTrue

  UUID:
    Description: UUID for the deployment
    Value: !Sub ${CreateUUID.UUID}