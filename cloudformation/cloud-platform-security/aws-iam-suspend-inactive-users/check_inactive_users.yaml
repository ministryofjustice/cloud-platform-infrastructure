AWSTemplateFormatVersion: 2010-09-09
Description: 'Determine and deactivate unused IAM user credentials and access keys'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: SNS Topic
      Parameters:
        - pCreateSnsTopic
        - pExistingSnsTopic
        - pSlackChannelName
        - pSlackHookUrl
    ParameterLabels:
      pCreateSnsTopic:
        default: Create new SNS Topic for slack notifications
      pSlackChannelName:
        default: Slack Channel Name
      pSlackHookUrl:
        default: Slack Channel Hook Url
      pExistingSnsTopic:
        default: Existing SNS Topic integrated with slack

Parameters:
  pCreateSnsTopic:
    Type: String
    Default: 'true'
    Description: If set to true, it will create a new SNS topic and lambda
    AllowedValues:
    - 'true'
    - 'false'
  pSlackChannelName:
    Type: String
    Description: Slack Channel Name
    Default: ''
  pSlackHookUrl:
    Type: String
    Description: Slack Hook Url
    Default: ''
  pExistingSnsTopic:
    Type: String
    Description: Arn of existing SNS Topic with lambda to slack integration
    Default: ''

Conditions:
  cCreateSnsTopic: !Equals [ !Ref pCreateSnsTopic, 'true' ]

Resources:
  #==================================================
  # Deny All IAM Policy for the SuspendedUsersGroup
  #==================================================
  DenyAllPolicy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: DenyAllPolicy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          Effect: "Deny"
          Action: "*"
          Resource: "*"
      Groups:
      - !Ref SuspendedUsersGroup
  SuspendedUsersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: SuspendedUsersGroup
  #==================================================
  # CIS 1.3	Ensure unused credentials are disabled
  # CIS 1.4	Ensure access keys are rotated
  # updated the rule set to check for 120 days 
  #==================================================
  RoleForDisableUnusedCredentialsFunction:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /servicerole/
      Policies:
        -
          PolicyName: DisableCredentials
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:AddUserToGroup
                  - iam:DeactivateMFADevice
                  - iam:DeleteLoginProfile
                  - iam:DetachUserPolicy
                  - iam:GetAccessKeyLastUsed
                  - iam:GetLoginProfile
                  - iam:GetUser
                  - iam:DeleteLoginProfile
                  - iam:DeleteUserPolicy
                  - iam:ListAccessKeys
                  - iam:ListGroupsForUser
                  - iam:ListMFADevices
                  - iam:ListUsers
                  - iam:ListAttachedGroupPolicies
                  - iam:ListAttachedUserPolicies
                  - iam:ListUserPolicies
                  - iam:RemoveUserFromGroup
                  - iam:UpdateAccessKey
                  - sns:Publish
                Resource: "*"

  FunctionToDisableUnusedCredentials:
    Type: AWS::Lambda::Function
    DependsOn: RoleForDisableUnusedCredentialsFunction
    Properties:
      FunctionName: DisableUnusedCredentials
      Code: ./lambda/disable_unused_credentials.py
      Description: Deletes unused passwords, disables unused access keys and moves inactive users to SuspendedUsersGroup
      Environment:
        Variables:
          SUSPENDED_USERS_GROUP: !Ref SuspendedUsersGroup
          TOPIC_ARN: !If [cCreateSnsTopic, !Ref CreateSnsTopic, !Ref pExistingSnsTopic]
      Handler: disable_unused_credentials.lambda_handler
      MemorySize: 256
      Role: !GetAtt RoleForDisableUnusedCredentialsFunction.Arn
      Runtime: python3.6
      Timeout: 180
  LambdaPermissionForDisableUnusedCredentials:
    Type: AWS::Lambda::Permission
    DependsOn:
      - FunctionToDisableUnusedCredentials
    Properties:
      FunctionName: !GetAtt FunctionToDisableUnusedCredentials.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  # Lambda Runs everyday at 9am UTC 
  ScheduledRuleForDisableUnusedCredentials:
    Type: AWS::Events::Rule
    Properties:
      Name: DisableUnusedCredentials
      Description: Deletes unused passwords and disables unused access keys
      ScheduleExpression: cron(0 9 ? * MON-FRI *)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt FunctionToDisableUnusedCredentials.Arn
          Id: TargetFunctionV1
  #==================================================
  # Delete Users from SuspendedUsersGroup
  #==================================================
  RoleForDeleteUsersInSuspendedUsersGroupFunction:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /servicerole/
      Policies:
        -
          PolicyName: DeleteUsersInSuspendedUsersGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:GetGroup
                  - iam:DeleteUser
                  - sns:Publish
                Resource: "*"

  FunctionToDeleteUsersInSuspendedUsersGroup:
    Type: AWS::Lambda::Function
    DependsOn: RoleForDeleteUsersInSuspendedUsersGroupFunction
    Properties:
      FunctionName: DeleteUsersInSuspendedUsersGroup
      Code: ./lambda/delete_users_in_suspendedusersgroup.py
      Description: Delete Users In the SuspendedUsersGroup
      Environment:
        Variables:
          SUSPENDED_USERS_GROUP: !Ref SuspendedUsersGroup
          TOPIC_ARN: !If [cCreateSnsTopic, !Ref CreateSnsTopic, !Ref pExistingSnsTopic]
      Handler: delete_users_in_suspendedusersgroup.lambda_handler
      MemorySize: 128
      Role: !GetAtt RoleForDeleteUsersInSuspendedUsersGroupFunction.Arn
      Runtime: python3.6
      Timeout: 20
  LambdaPermissionForDeleteUsersInSuspendedUsersGroup:
    Type: AWS::Lambda::Permission
    DependsOn:
      - FunctionToDeleteUsersInSuspendedUsersGroup
    Properties:
      FunctionName: !GetAtt FunctionToDeleteUsersInSuspendedUsersGroup.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  # Lambda Runs every Tuesday at 10am UTC 
  ScheduledRuleForDeleteUsersInSuspendedUsersGroup:
    Type: AWS::Events::Rule
    Properties:
      Name: DeleteUsersInSuspendedUsersGroup
      Description: Delete Users In the SuspendedUsersGroup
      ScheduleExpression: cron(0 10 ? * TUE *)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt FunctionToDeleteUsersInSuspendedUsersGroup.Arn
          Id: TargetFunctionV1
  #==================================================
  # Lambda to Slack Integration
  #==================================================
  RoleForSlackIntegrationFunction:
    Type: AWS::IAM::Role
    Condition: cCreateSnsTopic
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /servicerole/

  FunctionForSlackIntegration:
    Type: AWS::Lambda::Function
    DependsOn: RoleForSlackIntegrationFunction
    Condition: cCreateSnsTopic
    Properties:
      FunctionName: SlackIntegration
      Code: ./lambda/slack_integration.py
      Description: Lambda to Slack Integration
      Environment:
        Variables:
          SLACK_CHANNEL: !Ref pSlackChannelName
          HOOK_URL: !Ref pSlackHookUrl
      Handler: slack_integration.lambda_handler
      MemorySize: 128
      Role: !GetAtt RoleForSlackIntegrationFunction.Arn
      Runtime: python3.6
      Timeout: 20
  LambdaPermissionForSlackIntegration:
    Type: AWS::Lambda::Permission
    DependsOn:
      - FunctionForSlackIntegration
    Condition: cCreateSnsTopic
    Properties:
      FunctionName: !GetAtt FunctionForSlackIntegration.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CreateSnsTopic
  #==================================================
  # Optional SNS configuration
  #==================================================
  CreateSnsTopic:
    Type: AWS::SNS::Topic
    Condition: cCreateSnsTopic
    DependsOn: FunctionForSlackIntegration
    Properties:
      DisplayName: "CheckInactiveUsersSNSTopic"
      Subscription:
        - Endpoint: !GetAtt FunctionForSlackIntegration.Arn
          Protocol: lambda
  SnsAlarmSubscription:
    Type: AWS::SNS::Subscription
    Condition: cCreateSnsTopic
    Properties:
      Endpoint: !GetAtt FunctionForSlackIntegration.Arn
      Protocol: lambda
      TopicArn: !Ref CreateSnsTopic
